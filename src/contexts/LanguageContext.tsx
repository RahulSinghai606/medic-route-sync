
import React, { createContext, useState, useContext, useEffect } from 'react';

export type Language = 'en' | 'hi' | 'as' | 'mz' | 'kh' | 'nm' | 'bo' | 'bn';

interface LanguageContextType {
  language: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Translations for all supported languages
const translations: Record<Language, Record<string, string>> = {
  en: {
    // General UI
    'app.title': 'TERO',
    'app.subtitle': 'Triage and Emergency Routing Optimization',
    'dashboard': 'Dashboard',
    'assessment': 'Assessment',
    'hospitals': 'Hospitals',
    'patients': 'Patients',
    'cases': 'Cases',
    'logout': 'Logout',
    'paramedic': 'Paramedic',
    'status.available': 'Available',
    'status.busy': 'Busy',
    'status.offline': 'Offline',
    
    // Voice to Vitals
    'vitals.title': 'Voice-to-Vitals',
    'vitals.description': 'Record your voice to automatically extract vital signs',
    'vitals.start': 'Start Recording',
    'vitals.stop': 'Stop Recording',
    'vitals.play': 'Play Recording',
    'vitals.extract': 'Extract Vitals',
    'vitals.processing': 'Processing...',
    'vitals.tips': 'Tips:',
    'vitals.tip1': 'Speak clearly and at a normal pace',
    'vitals.tip2': 'Include vital sign values with their names (e.g., "Blood pressure 120 over 80")',
    'vitals.tip3': 'Use medical terminology for better recognition',
    'vitals.tip4': 'Mention measurements with their units (e.g., "38 degrees celsius")',
    'vitals.tip5': 'Say "SpO2" as "S-P-O-2" or "oxygen saturation" for better recognition',
    
    // Clinical Assessment
    'assessment.title': 'AI Clinical Assessment',
    'assessment.probability': 'Clinical Probability',
    'assessment.recommendations': 'Care Recommendations',
    'assessment.specialties': 'Specialty Requirements',
    'assessment.hospital': 'Find Matching Hospitals',
    'assessment.loading': 'Processing clinical information...',
    'assessment.unavailable': 'No AI assessment available yet.',
    'assessment.record': 'Record patient vitals with voice input to generate an assessment.',
    
    // Hospitals
    'hospitals.nearby': 'Nearby Hospitals',
    'hospitals.description': 'Hospitals close to your current location',
    'hospitals.find': 'Find Nearest Hospitals',
    'hospitals.match': 'Match Score',
    'hospitals.eta': 'ETA',
    'hospitals.beds': 'Available Beds',
    'hospitals.icu': 'ICU Capacity',
    'hospitals.specialties': 'Specialties',
    
    // Location
    'location.title': 'Paramedic Location',
    'location.description': 'Your current GPS coordinates',
    'location.current': 'Current Location:',
    'location.gps': 'GPS:',
    'location.refresh': 'Refresh',
    'location.error': 'Location Error',
    'location.loading': 'Getting your location...',
    'location.denied': 'Location access was denied. Please enable location services in your browser settings.',
    'location.unavailable': 'Location information is unavailable. Please try again later.',
    'location.timeout': 'Location request timed out. Please try again.',
    
    // Language selector
    'language.select': 'Select Language',
    'language.en': 'English ЁЯЗмЁЯЗз',
    'language.hi': 'Hindi ЁЯЗоЁЯЗ│',
    'language.as': 'Assamese',
    'language.mz': 'Mizo',
    'language.kh': 'Khasi',
    'language.nm': 'Nagamese',
    'language.bo': 'Bodo',
    'language.bn': 'Bengali ЁЯЗзЁЯЗй',
    
    // Additional translations for hebbal hospitals
    'hebbal.title': 'Hebbal Hospitals - Courtyard Bengaluru',
    'hebbal.description': 'Emergency facility matching nearby Hebbal'
  },
  hi: {
    // General UI
    'app.title': 'рдЯреЗрд░реЛ',
    'app.subtitle': 'рддреНрд░рд┐рдПрдЬ рдФрд░ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдорд╛рд░реНрдЧ рдЕрдиреБрдХреВрд▓рди',
    'dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'assessment': 'рдореВрд▓реНрдпрд╛рдВрдХрди',
    'hospitals': 'рдЕрд╕реНрдкрддрд╛рд▓',
    'patients': 'рдорд░реАрдЬрд╝',
    'cases': 'рдХреЗрд╕',
    'logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
    'paramedic': 'рдкреИрд░рд╛рдореЗрдбрд┐рдХ',
    'status.available': 'рдЙрдкрд▓рдмреНрдз',
    'status.busy': 'рд╡реНрдпрд╕реНрдд',
    'status.offline': 'рдСрдлрд╝рд▓рд╛рдЗрди',
    
    // Voice to Vitals
    'vitals.title': 'рд╡реЙрдЗрд╕-рдЯреВ-рд╡рд╛рдЗрдЯрд▓реНрд╕',
    'vitals.description': 'рдорд╣рддреНрд╡рдкреВрд░реНрдг рд▓рдХреНрд╖рдгреЛрдВ рдХреЛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдирд┐рдХрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдЖрд╡рд╛рдЬрд╝ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ',
    'vitals.start': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ',
    'vitals.stop': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдмрдВрдж рдХрд░реЗрдВ',
    'vitals.play': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╕реБрдиреЗрдВ',
    'vitals.extract': 'рд╡рд╛рдЗрдЯрд▓реНрд╕ рдирд┐рдХрд╛рд▓реЗрдВ',
    'vitals.processing': 'рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...',
    'vitals.tips': 'рдпреБрдХреНрддрд┐рдпрд╛рдБ:',
    'vitals.tip1': 'рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдФрд░ рд╕рд╛рдорд╛рдиреНрдп рдЧрддрд┐ рд╕реЗ рдмреЛрд▓реЗрдВ',
    'vitals.tip2': 'рд╡рд╛рдЗрдЯрд▓ рд╕рд┐рдЧреНрдирд▓ рдореВрд▓реНрдпреЛрдВ рдХреЛ рдЙрдирдХреЗ рдирд╛рдореЛрдВ рдХреЗ рд╕рд╛рде рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, "рдмреНрд▓рдб рдкреНрд░реЗрд╢рд░ 120 рдкрд░ 80")',
    'vitals.tip3': 'рдмреЗрд╣рддрд░ рдкрд╣рдЪрд╛рди рдХреЗ рд▓рд┐рдП рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╢рдмреНрджрд╛рд╡рд▓реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
    'vitals.tip4': 'рдЕрдкрдиреЗ рдЗрдХрд╛рдЗрдпреЛрдВ рдХреЗ рд╕рд╛рде рдорд╛рдк рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, "38 рдбрд┐рдЧреНрд░реА рд╕реЗрд▓реНрд╕рд┐рдпрд╕")',
    'vitals.tip5': '"SpO2" рдХреЛ "рдПрд╕-рдкреА-рдУ-2" рдпрд╛ "рдСрдХреНрд╕реАрдЬрди рд╕реИрдЪреБрд░реЗрд╢рди" рдХреЗ рд░реВрдк рдореЗрдВ рдХрд╣реЗрдВ',
    
    // Clinical Assessment
    'assessment.title': 'AI рдХреНрд▓рд┐рдирд┐рдХрд▓ рдЕрд╕реЗрд╕рдореЗрдВрдЯ',
    'assessment.probability': 'рдХреНрд▓рд┐рдирд┐рдХрд▓ рдкреНрд░реЛрдмреЗрдмрд┐рд▓рд┐рдЯреА',
    'assessment.recommendations': 'рджреЗрдЦрднрд╛рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ',
    'assessment.specialties': 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ',
    'assessment.hospital': 'рдорд┐рд▓рддреЗ-рдЬреБрд▓рддреЗ рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬреЗрдВ',
    'assessment.loading': 'рдХреНрд▓рд┐рдирд┐рдХрд▓ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░реЛрд╕реЗрд╕ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...',
    'assessment.unavailable': 'рдЕрднреА рддрдХ рдХреЛрдИ AI рдЕрд╕реЗрд╕рдореЗрдВрдЯ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред',
    'assessment.record': 'рдЕрд╕реЗрд╕рдореЗрдВрдЯ рддреИрдпрд╛рд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реЙрдЗрд╕ рдЗрдирдкреБрдЯ рд╕реЗ рдорд░реАрдЬ рдХреЗ рд╡рд╛рдЗрдЯрд▓реНрд╕ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВред',
    
    // Hospitals
    'hospitals.nearby': 'рдЖрд╕рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓',
    'hospitals.description': 'рдЖрдкрдХреЗ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдХреЗ рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓',
    'hospitals.find': 'рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬреЗрдВ',
    'hospitals.match': 'рдореИрдЪ рд╕реНрдХреЛрд░',
    'hospitals.eta': 'рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдордп',
    'hospitals.beds': 'рдЙрдкрд▓рдмреНрдз рдмреЗрдб',
    'hospitals.icu': 'ICU рдХреНрд╖рдорддрд╛',
    'hospitals.specialties': 'рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ',
    
    // Location
    'location.title': 'рдкреИрд░рд╛рдореЗрдбрд┐рдХ рд╕реНрдерд╛рди',
    'location.description': 'рдЖрдкрдХреЗ рд╡рд░реНрддрдорд╛рди GPS рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ',
    'location.current': 'рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди:',
    'location.gps': 'GPS:',
    'location.refresh': 'рд░рд┐рдлреНрд░реЗрд╢',
    'location.error': 'рд╕реНрдерд╛рди рддреНрд░реБрдЯрд┐',
    'location.loading': 'рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...',
    'location.denied': 'рд╕реНрдерд╛рди рдкрд╣реБрдБрдЪ рдХреЛ рдЕрд╕реНрд╡реАрдХрд╛рд░ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдореЗрдВ рд╕реНрдерд╛рди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рд╕рдХреНрд╖рдо рдХрд░реЗрдВред',
    'location.unavailable': 'рд╕реНрдерд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
    'location.timeout': 'рд╕реНрдерд╛рди рдЕрдиреБрд░реЛрдз рдХрд╛ рд╕рдордп рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
    
    // Language selector
    'language.select': 'рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
    'language.en': 'рдЕрдВрдЧреНрд░реЗрдЬрд╝реА ЁЯЗмЁЯЗз',
    'language.hi': 'рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│',
    'language.as': 'рдЕрд╕рдорд┐рдпрд╛',
    'language.mz': 'рдорд┐рдЬрд╝реЛ',
    'language.kh': 'рдЦрд╛рд╕реА',
    'language.nm': 'рдирд╛рдЧрд╛рдореАрдЬрд╝',
    'language.bo': 'рдмреЛрдбреЛ',
    'language.bn': 'рдмрдВрдЧрд╛рд▓реА ЁЯЗзЁЯЗй',
    
    // Additional translations for hebbal hospitals
    'hebbal.title': 'рд╣реЗрдмреНрдмрд▓ рдЕрд╕реНрдкрддрд╛рд▓ - рдХреЙрд░реНрдЯрдпрд╛рд░реНрдб рдмреЗрдВрдЧрд▓реБрд░реБ',
    'hebbal.description': 'рд╣реЗрдмреНрдмрд▓ рдХреЗ рдкрд╛рд╕ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реБрд╡рд┐рдзрд╛ рдорд┐рд▓рд╛рди'
  },
  
  // Bengali translations 
  bn: {
    // General UI
    'app.title': 'ржЯрзЗрж░рзЛ',
    'app.subtitle': 'рждрзНрж░рж┐ржпрж╝рзЗржЬ ржПржмржВ ржЬрж░рзБрж░рзА рж░рж╛ржЙржЯрж┐ржВ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи',
    'dashboard': 'ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
    'assessment': 'ржорзВрж▓рзНржпрж╛ржпрж╝ржи',
    'hospitals': 'рж╣рж╛рж╕ржкрж╛рждрж╛рж▓',
    'patients': 'рж░рзЛржЧрзАрж░рж╛',
    'cases': 'ржХрзЗрж╕',
    'logout': 'рж▓ржЧ ржЖржЙржЯ',
    'paramedic': 'ржкрзНржпрж╛рж░рж╛ржорзЗржбрж┐ржХ',
    'status.available': 'ржЙржкрж▓ржмрзНржз',
    'status.busy': 'ржмрзНржпрж╕рзНржд',
    'status.offline': 'ржЕржлрж▓рж╛ржЗржи',
    
    // Voice to Vitals
    'vitals.title': 'ржнржпрж╝рзЗрж╕-ржЯрзБ-ржнрж╛ржЗржЯрж╛рж▓рж╕',
    'vitals.description': 'рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрзЗрж░ ржХрж░рждрзЗ ржЖржкржирж╛рж░ ржХржгрзНржа рж░рзЗржХрж░рзНржб ржХрж░рзБржи',
    'vitals.start': 'рж░рзЗржХрж░рзНржбрж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи',
    'vitals.stop': 'рж░рзЗржХрж░рзНржбрж┐ржВ ржмржирзНржз ржХрж░рзБржи',
    'vitals.play': 'рж░рзЗржХрж░рзНржбрж┐ржВ ржЪрж╛рж▓рж╛ржи',
    'vitals.extract': 'ржнрж╛ржЗржЯрж╛рж▓рж╕ ржмрзЗрж░ ржХрж░рзБржи',
    'vitals.processing': 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ...',
    'vitals.tips': 'ржЯрж┐ржкрж╕:',
    'vitals.tip1': 'рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржПржмржВ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЧрждрж┐рждрзЗ ржХржерж╛ ржмрж▓рзБржи',
    'vitals.tip2': 'ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж▓ржХрзНрж╖ржгрзЗрж░ ржорж╛ржиржЧрзБрж▓рж┐ рждрж╛ржжрзЗрж░ ржирж╛ржо рж╕рж╣ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи (ржпрзЗржоржи, "ржмрзНрж▓рж╛ржб ржкрзНрж░рзЗрж╢рж╛рж░ рззрзирзж ржУржнрж╛рж░ рзорзж")',
    'vitals.tip3': 'ржЖрж░ржУ ржнрж╛рж▓ рж╕рзНржмрзАржХрзГрждрж┐рж░ ржЬржирзНржп ржорзЗржбрж┐ржХрзЗрж▓ рж╢ржмрзНржжрж╛ржмрж▓рзА ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
    'vitals.tip4': 'рждрж╛ржжрзЗрж░ ржПржХржХ рж╕рж╣ ржкрж░рж┐ржорж╛ржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи (ржпрзЗржоржи, "рзйрзо ржбрж┐ржЧрзНрж░рж┐ рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕")',
    'vitals.tip5': '"SpO2" ржХрзЗ "ржПрж╕-ржкрж┐-ржУ-рзи" ржмрж╛ "ржЕржХрзНрж╕рж┐ржЬрзЗржи рж╕рзНржпрж╛ржЪрзБрж░рзЗрж╢ржи" рж╣рж┐рж╕рзЗржмрзЗ ржмрж▓рзБржи',
    
    // Clinical Assessment
    'assessment.title': 'AI ржХрзНрж▓рж┐ржирж┐ржХрж╛рж▓ ржЕрзНржпрж╛рж╕рзЗрж╕ржорзЗржирзНржЯ',
    'assessment.probability': 'ржХрзНрж▓рж┐ржирж┐ржХрж╛рж▓ рж╕ржорзНржнрж╛ржмрзНржпрждрж╛',
    'assessment.recommendations': 'ржпрждрзНржирзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢',
    'assessment.specialties': 'ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрждрж╛ ржкрзНрж░ржпрж╝рзЛржЬржи',
    'assessment.hospital': 'ржорж┐рж▓рзЗ ржпрж╛ржУржпрж╝рж╛ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрзБржи',
    'assessment.loading': 'ржХрзНрж▓рж┐ржирж┐ржХрж╛рж▓ рждржерзНржп ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ...',
    'assessment.unavailable': 'ржПржЦржиржУ ржХрзЛржи AI ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржЙржкрж▓ржмрзНржз ржирзЗржЗред',
    'assessment.record': 'ржорзВрж▓рзНржпрж╛ржпрж╝ржи рждрзИрж░рж┐ ржХрж░рждрзЗ ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ ржжрж┐ржпрж╝рзЗ рж░рзЛржЧрзАрж░ ржнрж╛ржЗржЯрж╛рж▓ рж░рзЗржХрж░рзНржб ржХрж░рзБржиред',
    
    // Hospitals
    'hospitals.nearby': 'ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓',
    'hospitals.description': 'ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржХрж╛ржЫрзЗ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓',
    'hospitals.find': 'ржирж┐ржХржЯрждржо рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрзБржи',
    'hospitals.match': 'ржорзНржпрж╛ржЪ рж╕рзНржХрзЛрж░',
    'hospitals.eta': 'ржЖржирзБржорж╛ржирж┐ржХ рж╕ржоржпрж╝',
    'hospitals.beds': 'ржЙржкрж▓ржмрзНржз ржмрзЗржб',
    'hospitals.icu': 'ICU ржХрзНрж╖ржорждрж╛',
    'hospitals.specialties': 'ржмрж┐рж╢рзЗрж╖рждрзНржм',
    
    // Location
    'location.title': 'ржкрзНржпрж╛рж░рж╛ржорзЗржбрж┐ржХ ржЕржмрж╕рзНржерж╛ржи',
    'location.description': 'ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи GPS рж╕рзНржерж╛ржирж╛ржЩрзНржХ',
    'location.current': 'ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ржи:',
    'location.gps': 'GPS:',
    'location.refresh': 'рж░рж┐ржлрзНрж░рзЗрж╢',
    'location.error': 'ржЕржмрж╕рзНржерж╛ржи рждрзНрж░рзБржЯрж┐',
    'location.loading': 'ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржкрж╛ржУржпрж╝рж╛ рж╣ржЪрзНржЫрзЗ...',
    'location.denied': 'ржЕржмрж╕рзНржерж╛ржи ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржЕрж╕рзНржмрзАржХрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржЕржмрж╕рзНржерж╛ржи ржкрж░рж┐рж╖рзЗржмрж╛ рж╕ржХрзНрж╖ржо ржХрж░рзБржиред',
    'location.unavailable': 'ржЕржмрж╕рзНржерж╛ржирзЗрж░ рждржерзНржп ржЙржкрж▓ржмрзНржз ржирзЗржЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'location.timeout': 'ржЕржмрж╕рзНржерж╛ржи ржЕржирзБрж░рзЛржзрзЗрж░ рж╕ржоржпрж╝ рж╢рзЗрж╖ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    
    // Language selector
    'language.select': 'ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
    'language.en': 'ржЗржВрж░рзЗржЬрж┐ ЁЯЗмЁЯЗз',
    'language.hi': 'рж╣рж┐ржирзНржжрж┐ ЁЯЗоЁЯЗ│',
    'language.as': 'ржЕрж╕ржорзАржпрж╝рж╛',
    'language.mz': 'ржорж┐ржЬрзЛ',
    'language.kh': 'ржЦрж╛рж╕рж┐',
    'language.nm': 'ржирж╛ржЧрж╛ржорж┐ржЬ',
    'language.bo': 'ржмрзЛржбрзЛ',
    'language.bn': 'ржмрж╛ржВрж▓рж╛ ЁЯЗзЁЯЗй',
    
    // Additional translations for hebbal hospitals
    'hebbal.title': 'рж╣рзЗржмрзНржмрж╛рж▓ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ - ржХрзЛрж░рзНржЯржЗржпрж╝рж╛рж░рзНржб ржмрзЗржЩрзНржЧрж╛рж▓рзБрж░рзБ',
    'hebbal.description': 'рж╣рзЗржмрзНржмрж╛рж▓рзЗрж░ ржХрж╛ржЫрзЗ ржЬрж░рзБрж░рж┐ рж╕рзБржмрж┐ржзрж╛ ржорзНржпрж╛ржЪрж┐ржВ'
  },
  
  // Simplified translations for other languages - add more complete translations as needed
  as: { /* Same keys as Hindi/Bengali translations, but would be in Assamese */ },
  mz: { /* Same keys as Hindi/Bengali translations, but would be in Mizo */ },
  kh: { /* Same keys as Hindi/Bengali translations, but would be in Khasi */ },
  nm: { /* Same keys as Hindi/Bengali translations, but would be in Nagamese */ },
  bo: { /* Same keys as Hindi/Bengali translations, but would be in Bodo */ }
};

// Initialize other languages with Hindi translations as placeholders
const fallbackLanguages = ['as', 'mz', 'kh', 'nm', 'bo'] as const;
fallbackLanguages.forEach(lang => {
  translations[lang] = { ...translations['hi'] };
});

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguageState] = useState<Language>('en');

  // Load saved language preference from local storage on initial render
  useEffect(() => {
    const savedLanguage = localStorage.getItem('language') as Language;
    if (savedLanguage && Object.keys(translations).includes(savedLanguage)) {
      setLanguageState(savedLanguage);
    }
  }, []);

  // Save language preference to local storage when it changes
  const setLanguage = (newLanguage: Language) => {
    setLanguageState(newLanguage);
    localStorage.setItem('language', newLanguage);
  };

  // Translation function
  const t = (key: string): string => {
    // Check if key exists in current language
    if (translations[language] && translations[language][key]) {
      return translations[language][key];
    }
    
    // Fallback to English
    if (translations.en[key]) {
      return translations.en[key];
    }
    
    // If key doesn't exist at all, return the key itself
    console.warn(`Translation missing for key: ${key}`);
    return key;
  };

  const contextValue = {
    language,
    setLanguage,
    t
  };

  return (
    <LanguageContext.Provider value={contextValue}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
